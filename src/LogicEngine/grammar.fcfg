## Logic Engine Grammar


% start S
############################
# Grammar Rules
#############################

S[SEM = <?subj(?vp)>] -> NP[SEM=?subj] VP[SEM=?vp]

NP[SEM=<?det(?nom)> ] -> Det[SEM=?det]  Nom[SEM=?nom]
NP[SEM=?np] -> PLAYER[LOC=?l,SEM=?np]

Nom[SEM=?nom] -> N[SEM=?nom]

VP[SEM=<?v(?obj)>] -> TV[SEM=?v] NP[SEM=?obj]
VP[SEM=<?v(?obj,?ev)>] -> DTV[SEM=?v] NP[SEM=?obj] 'at' EVENT[SEM=?ev]
VP[SEM=<?v(?obj,?pp)>] -> DTV[SEM=?v] NP[SEM=?obj] PP[+TO,SEM=?pp]

PP[+TO, SEM=?np] -> P[+TO] NP[SEM=?np]

#############################
# Lexical Rules
#############################

{entities}

Det[SEM=<\P Q.all x.(P(x) -> Q(x))>] -> 'every'
Det[SEM=<\P Q.all x.(P(x) -> Q(x))>] -> 'all'
Det[SEM=<\P Q.exists x.(P(x) & Q(x))>] -> 'some'
Det[SEM=<\P Q.exists x.(P(x) & Q(x))>] -> 'a'
Det[SEM=<\P Q.exists x.(P(x) & Q(x))>] -> 'an'

N[NUM=sg, SEM=<\x.player(x)>] -> 'player'
N[NUM=pl, SEM=<\x.player(x)>] -> 'players'
N[SEM=<\x.event(x)>] -> 'event'

TV[SEM=<\X x.X(\y.beat(x,y))>] -> 'beat'
TV[SEM=<\X x.X(\y.beat(y,x))>] -> 'lost' 'to'

DTV[SEM=<\Y X x.X(\z.Y(\y.beatat(x,y,z)))>] -> 'beat'
DTV[SEM=<\Y X x.X(\z.Y(\y.beatat(y,x,z)))>] -> 'lost' 'to'

P[+to] -> 'to'